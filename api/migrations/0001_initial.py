# Generated by Django 5.0 on 2024-01-31 14:31

import django.core.validators
import django.db.models.deletion
import mptt.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Authority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('official_name', models.CharField(max_length=255, unique=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('town', models.TextField(blank=True, null=True)),
                ('contact_point', models.TextField(blank=True, null=True)),
                ('postal_code', models.TextField(blank=True, null=True)),
                ('fax', models.TextField(blank=True, null=True)),
                ('national_id', models.TextField(blank=True, null=True)),
                ('phone', models.TextField(blank=True, null=True)),
                ('email', models.TextField(blank=True, null=True)),
                ('nuts', models.TextField(blank=True, null=True)),
                ('website', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=2)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TenderUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'Username is not available'}, max_length=15, unique=True, validators=[django.core.validators.MinLengthValidator(2)])),
                ('email', models.EmailField(error_messages={'unique': 'This email is already used'}, max_length=254, unique=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='api.category')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContractObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_descr', models.TextField(blank=True, null=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('type_contract', models.CharField(blank=True, max_length=50, null=True)),
                ('val_total', models.FloatField(blank=True, null=True)),
                ('val_total_currency', models.CharField(blank=True, max_length=3, null=True)),
                ('val_total_in_euros', models.FloatField(blank=True, null=True)),
                ('lot_division', models.BooleanField()),
                ('cpv_main_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.category')),
            ],
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc_id', models.CharField(max_length=255)),
                ('uri', models.URLField()),
                ('date_published', models.DateField()),
                ('short_title', models.CharField(max_length=255)),
                ('contract_nature', models.CharField(choices=[('Services', 'Services'), ('Supplies', 'Supplies'), ('Works', 'Works'), ('Other', 'Other')], max_length=255)),
                ('authority', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.authority')),
                ('original_cpv', models.ManyToManyField(to='api.category')),
                ('contract_object', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.contractobject')),
            ],
        ),
        migrations.AddField(
            model_name='authority',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.country'),
        ),
        migrations.CreateModel(
            name='Winner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('official_name', models.CharField(max_length=255, unique=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('town', models.TextField(blank=True, null=True)),
                ('postal_code', models.TextField(blank=True, null=True)),
                ('email', models.TextField(blank=True, null=True)),
                ('nuts', models.TextField(blank=True, null=True)),
                ('val_total', models.FloatField(default=0)),
                ('website', models.TextField(blank=True, null=True)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.country')),
            ],
        ),
        migrations.CreateModel(
            name='ContractObjectItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nuts_code', models.CharField(blank=True, max_length=10, null=True)),
                ('short_descr', models.TextField(blank=True, null=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('val_total', models.FloatField(blank=True, null=True)),
                ('val_total_currency', models.CharField(blank=True, max_length=3, null=True)),
                ('val_total_in_euros', models.FloatField(blank=True, null=True)),
                ('contract_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='api.contractobject')),
                ('cpv_additional', models.ManyToManyField(to='api.category')),
                ('winner', models.ManyToManyField(to='api.winner')),
            ],
        ),
    ]
